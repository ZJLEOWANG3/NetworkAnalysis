warnings()
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
warnings
warnings()
?which
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
warnings()
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
1
r
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
r
hot
View(hot)
sum(c(TRUE,TRUE))
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
r
hot$chart_position==1
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
r
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
r
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
r
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
r
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
r2
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
r2
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
r2
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
r2
source('~/Downloads/StatComp/statcomp2023/labs/lab05_debugging.R', echo=TRUE)
colnames(ames)
ames
knitr::opts_chunk$set(echo = TRUE)
#install.packages("modeldata")
data("ames", package = "modeldata")
AIC.calc <- function(lm.rlt){
temp <- logLik(lm.rlt)
AIC <- 2*attr(temp,"df") - temp[1]*2
return (AIC)
}
dat <- read.csv("../datasets/voice_heights.csv")
m1 <- lm( height ~ voice, data = dat )
s1 <- summary(m1)
AIC.calc(m1)
AIC(m1)
get.formula <- function(response.var,cov.vec){
str.out <- paste(response.var," ~ ",cov.vec[1])
for (i in seq_along(cov.vec)){
if (i>=2){
str.out <- paste(str.out," + ",cov.vec[i])
}
}
return (str.out)
}
get.formula("Sale_Price",c("Gr_Liv_Area","Total_Bsmt_SF"))
get.cov <- function(response.var,cov.vec1,cov.vec2,db){
formula <- get.formula(response.var,cov.vec1)
m1 <- lm(formula,db)
AIC0 <- AIC.calc(m1)
tempi <- 0
stri <- ""
for (vari in seq_along(cov.vec2)){
formulai <- get.formula(response.var,c(cov.vec1,cov.vec2[vari]))
mi <- lm(formulai,db)
AICi <- AIC.calc(mi)
diffi <- AICi - AIC0
if (diffi < tempi){
tempi <- diffi
stri <- cov.vec2[vari]
}
}
if (tempi==0) return (NULL)
else return (stri)
}
get.cov("Sale_Price",c("Gr_Liv_Area","Total_Bsmt_SF"),
c("Exterior_2nd","Bsmt_Half_Bath",
"Garage_Cars"),ames)
colnames(ames)
forward.selection <- function(response.var,cov.vec,db){
# tell whether candidate cov.vec in db
coln.db <- colnames(db)
testbool <- any(grepl(paste(cov.vec,collapse="|"), coln.db))
if (testbool==FALSE) stop("This is an error message:
some candidate covariates are not
available in the data frame")
# start with only intercept
start0 <- "1"
candidate0 <- cov.vec
cov0 <- get.cov(response.var,start0,candidate0,db) # get the first covariant to minimize AIC
# loop through the cov.vec
# stop when returned cov is NULL or the candidate list is exhausted
starti <- c(cov0)
covi <- cov0
candidatei <- cov.vec[!cov.vec %in% cov0] # remove one
while (isFALSE(identical(covi,NULL) | identical(candidatei,character(0)) ) ) {
covi <- get.cov(response.var,starti,candidatei,db)
starti <- c(starti,covi) # add one
candidatei <- candidatei[!candidatei %in% covi] # remove one
}
return(starti)
}
#forward.selection("Sale_Price",c("Gr_Liv_Area",
#                "Total_Bsmt_SF","Street","Garage_Area","Neighborhood"),ames)
forward.selection("Sale_Price",colnames(ames),ames)
colnames(ames)
is.vector(colnames(ames))
as.vector(colnames(ames))
forward.selection <- function(response.var,cov.vec,db){
# tell whether candidate cov.vec in db
coln.db <- colnames(db)
print(grepl(paste(cov.vec,collapse="|"), coln.db))
testbool <- any(grepl(paste(cov.vec,collapse="|"), coln.db))
if (testbool==FALSE) stop("This is an error message:
some candidate covariates are not
available in the data frame")
# start with only intercept
start0 <- "1"
candidate0 <- cov.vec
cov0 <- get.cov(response.var,start0,candidate0,db) # get the first covariant to minimize AIC
# loop through the cov.vec
# stop when returned cov is NULL or the candidate list is exhausted
starti <- c(cov0)
covi <- cov0
candidatei <- cov.vec[!cov.vec %in% cov0] # remove one
while (isFALSE(identical(covi,NULL) | identical(candidatei,character(0)) ) ) {
covi <- get.cov(response.var,starti,candidatei,db)
starti <- c(starti,covi) # add one
candidatei <- candidatei[!candidatei %in% covi] # remove one
}
return(starti)
}
#forward.selection("Sale_Price",c("Gr_Liv_Area",
#                "Total_Bsmt_SF","Street","Garage_Area","Neighborhood"),ames)
forward.selection("Sale_Price",colnames(ames),ames)
vec1 <- colnames(ames)
forward.selection <- function(response.var,cov.vec,db){
# tell whether candidate cov.vec in db
coln.db <- colnames(db)
testbool <- any(grepl(paste(cov.vec,collapse="|"), coln.db))
if (testbool==FALSE) stop("This is an error message:
some candidate covariates are not
available in the data frame")
# start with only intercept
start0 <- "1"
candidate0 <- cov.vec
cov0 <- get.cov(response.var,start0,candidate0,db) # get the first covariant to minimize AIC
# loop through the cov.vec
# stop when returned cov is NULL or the candidate list is exhausted
starti <- c(cov0)
covi <- cov0
candidatei <- cov.vec[!cov.vec %in% cov0] # remove one
while (isFALSE(identical(covi,NULL) | identical(candidatei,character(0)) ) ) {
covi <- get.cov(response.var,starti,candidatei,db)
starti <- c(starti,covi) # add one
candidatei <- candidatei[!candidatei %in% covi] # remove one
}
return(starti)
}
#forward.selection("Sale_Price",c("Gr_Liv_Area",
#                "Total_Bsmt_SF","Street","Garage_Area","Neighborhood"),ames)
vec1 <- colnames(ames)
vec1 <- vec1[!vec1 %in% "Sale_Price"]
forward.selection("Sale_Price",,ames)
forward.selection <- function(response.var,cov.vec,db){
# tell whether candidate cov.vec in db
coln.db <- colnames(db)
testbool <- any(grepl(paste(cov.vec,collapse="|"), coln.db))
if (testbool==FALSE) stop("This is an error message:
some candidate covariates are not
available in the data frame")
# start with only intercept
start0 <- "1"
candidate0 <- cov.vec
cov0 <- get.cov(response.var,start0,candidate0,db) # get the first covariant to minimize AIC
# loop through the cov.vec
# stop when returned cov is NULL or the candidate list is exhausted
starti <- c(cov0)
covi <- cov0
candidatei <- cov.vec[!cov.vec %in% cov0] # remove one
while (isFALSE(identical(covi,NULL) | identical(candidatei,character(0)) ) ) {
covi <- get.cov(response.var,starti,candidatei,db)
starti <- c(starti,covi) # add one
candidatei <- candidatei[!candidatei %in% covi] # remove one
}
return(starti)
}
#forward.selection("Sale_Price",c("Gr_Liv_Area",
#                "Total_Bsmt_SF","Street","Garage_Area","Neighborhood"),ames)
vec1 <- colnames(ames)
vec1 <- vec1[!vec1 %in% "Sale_Price"]
forward.selection("Sale_Price",vec1,ames)
installNetCoMiPacks()
devtools::install_github("zdk123/SpiecEasi")
devtools::install_github("GraceYoon/SPRING")
?installNetCoMiPacks()
library(NetCoMi)
install.packages(installNetCoMiPacks())
install.packages(installNetCoMiPacks
)
devtools::install_github("stefpeschel/NetCoMi",
dependencies = c("Depends", "Imports", "LinkingTo"),
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
installNetCoMiPacks()
installNetCoMiPacks()
library(NetCoMi)
?RSQLite
??RSQLite
install.packages(RSQLite)
library(DBI)
library(NetCoMi)
install.packages(lazyload)
install.packages(lazyLoad)
library(NetCoMi)
install.packages(netcomi)
library(NetCoMi)
data("amgut1.filt")
data("amgut2.filt.phy")
net_spring <- netConstruct(amgut1.filt,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 50),
filtSamp = "totalReads",
filtSampPar = list(totalReads = 1000),
measure = "spring",
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "none",
dissFunc = "signed",
verbose = 2,
seed = 123456)
net_spring
props_spring <- netAnalyze(net_spring,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
install.packages(limma)
BiocManager::install("limma")
props_spring <- netAnalyze(net_spring,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
summary(props_spring, numbNodes = 5L)
amgut1.filt
colnames(amgut1.filt)
row.names(amgut1.filt)
??data("amgut1.filt")
?data("amgut1.filt")
?amgut2.filt.phy
amgut2.filt.phy
otu_table(amgut2.filt.phy)
View(amgut2.filt.phy)
amgut2.filt.phy[otu_table]
attr(amgut2.filt.phy,otu_table)
?read.csv
knitr::opts_chunk$set(echo = TRUE)
# load data n x d (samples x OTUs)
dat <- read.csv("../abundance/genus.1.10.transpose.tsv")
dat
# load data n x d (samples x OTUs)
dat <- read.csv("../abundance/genus.1.10.transpose.tsv",sep='\t')
data
dat
colnames(dat)
rownames(dat)
# load data n x d (samples x OTUs)
dat <- read.csv("../abundance/genus.transpose.tsv",sep='\t')
dat
rownames(dat)
# load data n x d (samples x OTUs)
dat <- read.csv("../abundance/genus.tsv",sep='\t')
rownames(dat)
colnames(dat)
dat
?transpose
# load data n x d (samples x OTUs)
dat <- transpose(read.csv("../abundance/genus.tsv",sep='\t'))
# load data n x d (samples x OTUs)
dat <- t(read.csv("../abundance/genus.tsv",sep='\t'))
dat
# load data n x d (samples x OTUs)
dat <- as.numeric(t(read.csv("../abundance/genus.tsv",sep='\t')))
dat
# load data n x d (samples x OTUs)
dat <- as.numeric(t(read.csv("../abundance/genus.tsv",sep='\t')))
dat[is.na(dat)] <- 0
dat
rownames(dat)
?read.csv
?read.table
# load data n x d (samples x OTUs)
dat <- as.numeric(t(read.table("../abundance/genus.tsv",sep='\t',row.names=1,col.names=1)))
# load data n x d (samples x OTUs)
dat <- as.numeric(t(read.table("../abundance/genus.tsv",sep='\t',row.names=1)))
dat[is.na(dat)] <- 0
dat
# load data n x d (samples x OTUs)
dat <- as.numeric(t(read.table("../abundance/genus.tsv",sep='\t')))
dat[is.na(dat)] <- 0
dat
read.table("../abundance/genus.tsv",sep='\t')
setwd("/Users/zijianleowang/Desktop/GitHub/NetworkAnalysis/scripts")
read.table("../abundance/genus.tsv",sep='\t')
read.csv("../abundance/genus.tsv",sep='\t')
read.csv("/Users/zijianleowang/Desktop/GitHub/NetworkAnalysis/abundance/genus.tsv",sep='\t')
rownames(read.csv("/Users/zijianleowang/Desktop/GitHub/NetworkAnalysis/abundance/genus.tsv",sep='\t'))
getwd
getwd()
setwd("/Users/zijianleowang/Desktop/GitHub/NetworkAnalysis/scripts")
getwd()
setwd("/Users/zijianleowang/Desktop/GitHub/NetworkAnalysis/scripts")
getwd()
?read.table
read.table("../abundance/genus.tsv",sep='\t',col.names = 1)
read.table("../abundance/genus.tsv",sep='\t')
??read.csv
?read.csv
dat <- t(read.csv("../abundance/genus.tsv",sep='\t',col.names=1))
row.names(read.table("../abundance/genus.tsv",sep='\t'))
col.names(read.table("../abundance/genus.tsv",sep='\t'))
colnames(read.table("../abundance/genus.tsv",sep='\t'))
read.table("../abundance/genus.tsv",sep='\t')[1,1]
read.table("../abundance/genus.tsv",sep='\t')[1,2]
read.table("../abundance/genus.tsv",sep='\t')[1,3]
read.table("../abundance/genus.tsv",sep='\t')[1,4]
read.table("../abundance/genus.tsv",sep='\t')[2,4]
read.table("../abundance/genus.tsv",sep='\t',col.names=1)
# load data n x d (samples x OTUs)
dat <- t(read.table("../abundance/genus.tsv",sep='\t',header = TRUE))
dat[is.na(dat)] <- 0
dat
row.names(dat)
colnames(dat)
dat
read.table("../abundance/genus.tsv",sep='\t',header = TRUE)
read.table("../abundance/genus.tsv",sep='\t',header = TRUE)[1,]
read.table("../abundance/genus.tsv",sep='\t',header = TRUE)[2,]
View(dat)
# load data n x d (samples x OTUs)
dat <- t(read.table("../abundance/genus.tsv",sep='\t',header = TRUE,row.names = 1))
dat[is.na(dat)] <- 0
dat
View(dat)
# load data n x d (samples x OTUs)
dat <- t(read.table("../abundance/genus.tsv",sep='\t',header = TRUE,row.names = 1))
dat <- as.numeric(dat)
dat[is.na(dat)] <- 0
dat
# load data n x d (samples x OTUs)
dat <- t(read.table("../abundance/genus.tsv",sep='\t',header = TRUE,row.names = 1))
dat[is.na(dat)] <- 0
View(dat)
View(dat)
# load data n x d (samples x OTUs)
dat <- read.table("../abundance/genus.tsv",sep='\t',header = TRUE,row.names = 1)
dat[is.na(dat)] <- 0
View(dat)
# calculate network
net_spring <- netConstruct(dat,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 50),
filtSamp = "totalReads",
filtSampPar = list(totalReads = 1000),
measure = "spring",
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "none",
dissFunc = "signed",
verbose = 2,
seed = 123456)
View(amgut1.filt)
debug(netConstruct)
# calculate network
net_spring <- debug(netConstruct(dat,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 50),
filtSamp = "totalReads",
filtSampPar = list(totalReads = 1000),
measure = "spring",
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "none",
dissFunc = "signed",
verbose = 2,
seed = 123456))
# calculate network
net_spring <- netConstruct(dat,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 50),
filtSamp = "totalReads",
filtSampPar = list(totalReads = 0.01),
measure = "spring",
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "none",
dissFunc = "signed",
verbose = 2,
seed = 123456)
# calculate network
net_spring <- netConstruct(dat,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 50),
filtSamp = "totalReads",
filtSampPar = list(totalReads = 0.01),# my data is abundance
measure = "spring",
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "none",
dissFunc = "signed",
verbose = 2,
seed = 123456)
# calculate network
net_spring <- netConstruct(dat,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 50),
filtSamp = "totalReads",
filtSampPar = list(totalReads = 0.01),# my data is abundance
measure = "spring",
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "none",
dissFunc = "signed",
verbose = 2,
seed = 123456)
Q
q
q
net_spring <- netConstruct(dat,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 50),
filtSamp = "totalReads",
filtSampPar = list(totalReads = 0.01),# my data is abundance
measure = "spring",
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "none",
dissFunc = "signed",
verbose = 2,
seed = 123456)
Q
# load data n x d (samples x OTUs)
dat <- read.table("../abundance/genus.tsv",sep='\t',header = TRUE,row.names = 1)
dat[is.na(dat)] <- 0
# calculate network
net_spring <- netConstruct(dat,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 50),
filtSamp = "totalReads",
filtSampPar = list(totalReads = 0.01),# my data is abundance
measure = "spring",
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "none",
dissFunc = "signed",
verbose = 2,
seed = 123456)
